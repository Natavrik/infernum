#include<iostream>
using namespace std;

class Polynom
{
public:
    int n;                                /// степень полинома
    int m;                                /// для сравнения
    double *koef;                         /// указатель на массив коэффициентов...
                                          /// ...полинома koef[i] - коэффициент при i-й степени
    Polynom();                            /// конструктор
    Polynom(int a);                       /// конструктор с параметрами
    Polynom(const Polynom &);             /// конструктор копирования
    ~Polynom();                           /// деструктор
    Polynom operator+(const Polynom &);   /// оператор сложения полиномов
    Polynom operator-(const Polynom &);   /// оператор вычитания полиномов
    Polynom operator*(const Polynom &);   /// оператор умножения полиномов
    Polynom operator/(const Polynom &);   /// оператор деления полиномов
    Polynom operator%(const Polynom &);   /// оператор остатка от деления полиномов
    Polynom operator=(const Polynom &);   /// оператор присваивания
    bool    operator==(const Polynom&);	  /// оператор сравнения полиномов
    bool    empty ();                     /// функция для проверки на пустоту полинома
    void    deleteZero();                 /// функция удаления нулевых элементов
    void    addKoef(int, double);         /// функция добавления элементов
    friend ostream &operator<< (ostream &s, const Polynom &c);  /// перегруженный оператор вывода
    friend istream &operator >> (istream &s, Polynom &c);       /// перегруженный оператор ввода
    double &operator[](int i)             /// оператор ввода коэффициентов
    {
        return koef[i];
    }
};

Polynom::Polynom()
{
    koef = NULL;
    n=-1;
}

void Polynom:: deleteZero()
{
    int i;
    for(i = 0; i < n && koef[n-i]==0; i++)
        ;
    n-=i;
}

void Polynom::addKoef(int a, double q)
{
    if(n < a){
        double* temp = new double[a+1];
        for (int i = 0; i < a+1; i++) temp[i]=0;
        for (int i = 0; i < n+1; i++) temp[i]=koef[i];
        delete[]koef;
        koef=temp;
        n = a;
    }
    koef[a]=q;
}

bool Polynom:: empty()
{
    int i = 0;
    for (; i <= n;  i++)
        if (koef[i]!=0)
            return false;
    return true;
}

Polynom::~Polynom()
{
    delete[]koef;
}

Polynom::Polynom(int a)
{
    int i;
    n = a;
    koef = new double[n + 1];
    for (i = 0; i <= n; i++)
    {
        koef[i] = 0;
    }
}

Polynom::Polynom(const Polynom &f)
{
    n = f.n;
    koef = new double[n + 1];
    for (int i = 0; i <= n; i++)
        koef[i] = f.koef[i];
}

Polynom Polynom::operator-(const Polynom &t)
{
    int i;
    if (n >= t.n)///А>B
    {
        Polynom Z(*this);
        for (i = 0; i <= t.n; i++)
            Z.koef[i] = koef[i] - t.koef[i];
            Z.deleteZero();
        return Z;
    }
    else        ///B>A
    {
        Polynom Z(t.n);
        Z.n = t.n;
        for (i = 0; i <= n; i++)
            Z.koef[i] = -t.koef[i] + koef[i];
        for (i = n + 1; i <= t.n; i++)
            Z.koef[i] = -t.koef[i];
            Z.deleteZero();
        return Z;
    }
}

Polynom Polynom::operator+(const Polynom &t)
{
    int i;
    if (n >= t.n)//A>B
    {
        Polynom Z=*this;
        for (i = 0; i <= n; i++)
            Z.koef[i] = koef[i] + t.koef[i];
            Z.deleteZero();
        return Z;
    }
    else//A<B
    {
        Polynom Z=t;
        for (i = 0; i <= n; i++)
            Z.koef[i] = t.koef[i] + koef[i];
            Z.deleteZero();
        return Z;
    }
}

Polynom Polynom::operator*(const Polynom &t)
{
    int i,j;
    Polynom Y(n+t.n);
    Y.n = n+t.n;
    for (i = 0; i <= n; i++)
        for (j = 0; j <= t.n; j++)
            Y.koef[i + j] += koef[i]*t.koef[j];
            Y.deleteZero();
    return Y;
}

Polynom Polynom::operator/(const Polynom & b)
{
    Polynom res = 0;
	Polynom e(*this);
	double t = 0;
	int w = 0;
	while ( !e.empty() && (e.n >= b.n) )
	{
		t = e.koef[e.n] / b.koef[b.n];
		w = e.n - b.n;
		Polynom temp;
		temp.addKoef(w,t);
		res = res + temp;
		temp = temp * b;
		e = e - temp;
	}
	return res;
}

Polynom Polynom::operator%(const Polynom & b)
{
    Polynom res = 0;
	Polynom e(*this);
	double t = 0;
	int w = 0;
	while ( !e.empty() && (e.n >= b.n) )
	{
		t = e.koef[e.n] / b.koef[b.n];
		w = e.n - b.n;
		Polynom temp;
		temp.addKoef(w,t);
		temp = temp * b;
		e = e - temp;
	}
	return e;
}

Polynom Polynom::operator=(const Polynom &t)
{
    if(this!=&t)
    {
        delete[] koef;
        n = t.n;
        koef = new double[n + 1];
        for (int i = 0; i <= n; i++)
            koef[i] = t.koef[i];
    }
    return *this;
}

bool Polynom::operator==(const Polynom & r)
{
    if(n != r.n) return false;
    for(int i = 0; i <= n; i++)
    {
        if (koef[i] != r.koef[i])
            return false;
    }
    return true;
}

istream &operator>>(istream &s, Polynom &c)// перегруженный оператор ввода
{
    int i;
    for (i = 0; i <= c.n; i++) { s >> c.koef[i];} return s;
}
ostream &operator<<(ostream &s, const Polynom &c)
{
    int i, n = 0;
    for (i = 0; i <= c.n; i++){ if (c.koef[i] != 0) n++; }
    if (n != 0)
    {
        if (c.koef[0] != 0){ s << c.koef[0]; }
        for (i = 1; i <= c.n; i++)
            {
                if (c.koef[i] < 0)
                {
                    if(c.koef[i]!=-1)
                        s << c.koef[i] << "x^" << i;
                    else
                s << "-" << "x^" << i;
                }
            else
                {
                if (c.koef[i] != 0)
                    {
                    if(c.koef[i] != 1)
                        s << "+" << c.koef[i] << "x^" << i;
                    else
                        s<< "+" << "x^" << i;
                    }
                }
            }
s << "\n";
}
else { s << 0; }
return s;
}

int main()
{
    setlocale(LC_ALL, "");
    int n, m;
    cout << "Запись идёт от меньшего к большему.\n\t\tНапример:\n"
            "Если Вы хотите записать полином вида:"
            "        x^3-12x^2+0x^1-42 ,\n"
            "то Вам следует записать в обратном порядке:"
            " -42+0x^1-12x^2+x^3\n\n\n";

    cout << "Введите степень полинома A: ";
    cin >> n;
    cout << "Введите степень полинома B: ";
    cin >> m;
    Polynom A(n), B(m), D, K, Y, P;
    cout << "Введите коэффициенты полинома A: ";
    cin >> A;
    cout << "Введите коэффициенты полинома B: ";
    cin >> B;
    cout << "\n\t\tМногочлен А:     " << A << "\n";
    cout << "\t\tМногочлен B:     " << B << "\n";
    cout << "\t\tМногочлен D=A+B: " << (D = A + B) << "\n";
    cout << "\t\tМногочлен K=A-B: " << (K = A - B) << "\n";
    cout << "\t\tМногочлен Y=A*B: " << (Y = A*B)<< "\n";
    cout << "\t\tСравнение A==B:  " << (A==B)<< "\n\n";
    cout << "\t\tМногочлен P=A/B: " << (P = A/B)<< "\n";
    cout << "\t\tМногочлен P=A%B: " << (P = A%B)<< "\n";
    system("pause");
}
